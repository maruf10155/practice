<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="1" ignored="0" total="4" passed="3">
  <reporter-output>
  </reporter-output>
  <suite name="All Test Suite" duration-ms="75550" started-at="2020-06-15T21:31:05 EDT" finished-at="2020-06-15T21:32:21 EDT">
    <groups>
    </groups>
    <test name="login test" duration-ms="75550" started-at="2020-06-15T21:31:05 EDT" finished-at="2020-06-15T21:32:21 EDT">
      <class name="testng.login_test">
        <test-method status="PASS" signature="bef()[pri:0, instance:testng.login_test@1d057a39]" name="bef" is-config="true" duration-ms="8253" started-at="2020-06-15T21:31:05 EDT" finished-at="2020-06-15T21:31:14 EDT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- bef -->
        <test-method status="PASS" signature="positive(java.lang.String, java.lang.String)[pri:1, instance:testng.login_test@1d057a39]" name="positive" duration-ms="12951" started-at="2020-06-15T21:31:14 EDT" finished-at="2020-06-15T21:31:27 EDT">
          <params>
            <param index="0">
              <value>
                <![CDATA[zxc123]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[123456]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- positive -->
        <test-method status="PASS" signature="aft()[pri:0, instance:testng.login_test@1d057a39]" name="aft" is-config="true" duration-ms="818" started-at="2020-06-15T21:31:27 EDT" finished-at="2020-06-15T21:31:27 EDT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- aft -->
        <test-method status="PASS" signature="bef()[pri:0, instance:testng.login_test@1d057a39]" name="bef" is-config="true" duration-ms="5818" started-at="2020-06-15T21:31:27 EDT" finished-at="2020-06-15T21:31:33 EDT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- bef -->
        <test-method status="PASS" signature="negetive([Ljava.lang.String;)[pri:2, instance:testng.login_test@1d057a39]" name="negetive" duration-ms="9896" started-at="2020-06-15T21:31:33 EDT" data-provider="data" finished-at="2020-06-15T21:31:43 EDT">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.String;@51bd8b5c]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- negetive -->
        <test-method status="PASS" signature="aft()[pri:0, instance:testng.login_test@1d057a39]" name="aft" is-config="true" duration-ms="862" started-at="2020-06-15T21:31:43 EDT" finished-at="2020-06-15T21:31:44 EDT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- aft -->
        <test-method status="PASS" signature="bef()[pri:0, instance:testng.login_test@1d057a39]" name="bef" is-config="true" duration-ms="5990" started-at="2020-06-15T21:31:44 EDT" finished-at="2020-06-15T21:31:50 EDT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- bef -->
        <test-method status="FAIL" signature="negetive([Ljava.lang.String;)[pri:2, instance:testng.login_test@1d057a39]" name="negetive" duration-ms="13429" started-at="2020-06-15T21:31:50 EDT" data-provider="data" finished-at="2020-06-15T21:32:03 EDT">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.String;@3081f72c]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [Sign-on: Mercury Tours] but found [Find a Flight: Mercury Tours:]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [Sign-on: Mercury Tours] but found [Find a Flight: Mercury Tours:]
at org.testng.Assert.fail(Assert.java:97)
at org.testng.Assert.assertEqualsImpl(Assert.java:136)
at org.testng.Assert.assertEquals(Assert.java:118)
at org.testng.Assert.assertEquals(Assert.java:575)
at org.testng.Assert.assertEquals(Assert.java:585)
at testng.login_test.negetive(login_test.java:49)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:134)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:597)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:816)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.ArrayList.forEach(ArrayList.java:1257)
at org.testng.TestRunner.privateRun(TestRunner.java:766)
at org.testng.TestRunner.run(TestRunner.java:587)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
at org.testng.SuiteRunner.run(SuiteRunner.java:286)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1187)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1109)
at org.testng.TestNG.runSuites(TestNG.java:1039)
at org.testng.TestNG.run(TestNG.java:1007)
at com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)
at com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:110)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- negetive -->
        <test-method status="PASS" signature="aft()[pri:0, instance:testng.login_test@1d057a39]" name="aft" is-config="true" duration-ms="860" started-at="2020-06-15T21:32:03 EDT" finished-at="2020-06-15T21:32:04 EDT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- aft -->
        <test-method status="PASS" signature="bef()[pri:0, instance:testng.login_test@1d057a39]" name="bef" is-config="true" duration-ms="5795" started-at="2020-06-15T21:32:04 EDT" finished-at="2020-06-15T21:32:10 EDT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- bef -->
        <test-method status="PASS" signature="negetive([Ljava.lang.String;)[pri:2, instance:testng.login_test@1d057a39]" name="negetive" duration-ms="9846" started-at="2020-06-15T21:32:10 EDT" data-provider="data" finished-at="2020-06-15T21:32:20 EDT">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.String;@1f3f02ee]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- negetive -->
        <test-method status="PASS" signature="aft()[pri:0, instance:testng.login_test@1d057a39]" name="aft" is-config="true" duration-ms="815" started-at="2020-06-15T21:32:20 EDT" finished-at="2020-06-15T21:32:21 EDT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- aft -->
      </class> <!-- testng.login_test -->
    </test> <!-- login test -->
  </suite> <!-- All Test Suite -->
</testng-results>
